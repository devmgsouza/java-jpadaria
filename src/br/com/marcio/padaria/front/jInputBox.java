/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package br.com.marcio.padaria.front;

import br.com.marcio.padaria.front.funcoes.TeclasPermitidas;
import br.com.marcio.padaria.model.Despesas;
import br.com.marcio.padaria.model.Principal;
import br.com.marcio.padaria.model.Retiradas;
import br.com.marcio.padaria.repositorio.Imp.DespesasImp;
import br.com.marcio.padaria.repositorio.Imp.PrincipalImp;
import br.com.marcio.padaria.repositorio.Imp.RetiradasImp;
import br.com.marcio.padaria.repositorio.model.Exception.DespesasException;
import br.com.marcio.padaria.repositorio.model.Exception.PrincipalException;
import br.com.marcio.padaria.repositorio.model.Exception.RetiradasException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author MgSouza
 */
public class jInputBox extends javax.swing.JDialog {
    String operacao;
    Object arg;
    /**
     * VERIFICAR O ACESSO SINGLETON
     */
    private static jInputBox instance = null;
    
    public jInputBox() {
        initComponents();
        jTextFieldValor.setDocument(new TeclasPermitidas());
        setAcessibilidade();
    }
    
    public jInputBox(String titulo, String operacao, Object arg){
        initComponents();
        jTextFieldValor.setDocument(new TeclasPermitidas());
        jLabelTitulo.setText(titulo);
        setAcessibilidade();
        this.operacao = operacao;
        this.arg = arg;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonOk = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jTextFieldValor = new javax.swing.JTextField();
        jLabelTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(179, 96));
        setMinimumSize(new java.awt.Dimension(179, 96));
        setType(java.awt.Window.Type.UTILITY);

        jButtonOk.setText("OK");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jLabelTitulo.setText("xxxx");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldValor)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelTitulo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 51, Short.MAX_VALUE)
                        .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSair)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk)
                    .addComponent(jButtonSair))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        SimpleDateFormat formatDate = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat formatHora = new SimpleDateFormat("HH:mm");
        String valor = (jTextFieldValor.getText()).replace(",", ".");
        switch (operacao) {
            case "despesa":
                Despesas despesa = (Despesas) arg;
                DespesasImp dimp = new DespesasImp();
                despesa.setValor(valor);
                despesa.setData(formatDate.format(new Date()));
                try {
                    dimp.atualizar(despesa);
                    this.dispose();
                } catch (DespesasException ex) {
                    JOptionPane.showMessageDialog(this, "Não foi possível atualizar o valor!","ERRO!",
                            JOptionPane.ERROR_MESSAGE);
                    //System.out.println(ex.getMessage());
                    
                }       break;
            case "retirada":
                
                RetiradasImp rimp = new RetiradasImp();
                Retiradas retirada = (Retiradas) arg;
                retirada.setValor(valor);
                retirada.setData(formatDate.format(new Date()));
                try {
                    rimp.atualizar(retirada);
                    this.dispose();
                    
                } catch (RetiradasException ex) {
                    JOptionPane.showMessageDialog(this, "Não foi possível atualizar o valor!","ERRO!",
                            JOptionPane.ERROR_MESSAGE);
                    //System.out.println(ex.getMessage());
                }   break;
                
            case "PDV":
                PrincipalImp pimp = new PrincipalImp();
                Principal principal = (Principal) arg;
                principal.setValor(valor);
                principal.setData(formatDate.format(new Date()));
                principal.setHora(formatHora.format(new Date()));
                try {
                    pimp.atualizar(principal);
                    this.dispose();
                    
                } catch (PrincipalException ex) {
                    JOptionPane.showMessageDialog(this, "Não foi possível atualizar o valor!","ERRO!",
                            JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            default:
                JOptionPane.showMessageDialog(this,"Não foi possível realizar esta"
                        + " operação. Tente novamente e, caso o problema persista, procure "
                        + "o administrador do sistema.", "ERRO", JOptionPane.ERROR_MESSAGE);
                break;
        }
            
            
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
       this.dispose();
    }//GEN-LAST:event_jButtonSairActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(jInputBox.class.getName()).log(Level.SEVERE, null, ex);
        }
      
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new jInputBox().setVisible(true);
            }
        });
    }
    
    public static jInputBox getInstance(String titulo, String operacao, Object arg){
        if (instance == null) {
            instance = new jInputBox(titulo, operacao, arg);
        }
        return instance;
    }
    
    private void setAcessibilidade() {
        JRootPane meuJPanel = getRootPane();
        meuJPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "ESCAPE");
        meuJPanel.getRootPane().getActionMap().put("ESCAPE", new AbstractAction("ESCAPE") {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
       });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JTextField jTextFieldValor;
    // End of variables declaration//GEN-END:variables
}
